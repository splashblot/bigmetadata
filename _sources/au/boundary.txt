

.. Boundaries:

Boundaries


Political, administrative, and census-based boundaries.

.. contents::
   :local:
   :depth: 10





.. _au.geo.CED:

Commonwealth Electoral Divisions
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Commonwealth Electoral Divisions" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.CED'
    )





Obtain all "Commonwealth Electoral Divisions" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.CED'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.CED`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.GCCSA:

Greater Capital City Statistical Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Greater Capital City Statistical Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.GCCSA'
    )





Obtain all "Greater Capital City Statistical Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.GCCSA'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.GCCSA`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.LGA:

Local Government Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Local Government Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.LGA'
    )





Obtain all "Local Government Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.LGA'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.LGA`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.POA:

Postal Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Postal Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.POA'
    )





Obtain all "Postal Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.POA'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.POA`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.RA:

Remoteness Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Remoteness Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.RA'
    )





Obtain all "Remoteness Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.RA'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.RA`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SOS:

Section of State
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Section of State" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SOS'
    )





Obtain all "Section of State" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SOS'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SOS`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SOSR:

Section of State Ranges
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Section of State Ranges" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SOSR'
    )





Obtain all "Section of State Ranges" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SOSR'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SOSR`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SUA:

Significant Urban Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Significant Urban Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SUA'
    )





Obtain all "Significant Urban Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SUA'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SUA`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SED:

State Electoral Divisions
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "State Electoral Divisions" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SED'
    )





Obtain all "State Electoral Divisions" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SED'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SED`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SSC:

State Suburbs
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "State Suburbs" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SSC'
    )





Obtain all "State Suburbs" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SSC'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SSC`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.STE:

State/Territory
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "State/Territory" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.STE'
    )





Obtain all "State/Territory" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.STE'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.STE`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SA1:

Statistical Area Level 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Statistical Area Level 1" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SA1'
    )





Obtain all "Statistical Area Level 1" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SA1'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SA1`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SA2:

Statistical Area Level 2
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Statistical Area Level 2" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SA2'
    )





Obtain all "Statistical Area Level 2" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SA2'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SA2`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SA3:

Statistical Area Level 3
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Statistical Area Level 3" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SA3'
    )





Obtain all "Statistical Area Level 3" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SA3'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SA3`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SA4:

Statistical Area Level 4
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Statistical Area Level 4" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SA4'
    )





Obtain all "Statistical Area Level 4" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SA4'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.SA4`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    







.. _au.geo.SLA:

Statistical Local Areas
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Statistical Local Areas" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.SLA'
    )





Obtain all "Statistical Local Areas" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.SLA'
    )









:Source:

    

:License:

    







.. _au.geo.UCL:

Urban Centres and Localities
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------











Obtain "Urban Centres and Localities" geometry at one point:


.. code-block:: postgresql





  INSERT INTO {tablename}(the_geom)
    SELECT OBS_GetBoundary(
      CDB_LatLng(-33.8806, 151.2131),
      'au.geo.UCL'
    )





Obtain all "Urban Centres and Localities" geometries within an area:

.. code-block:: postgresql

  INSERT INTO {new_table_name} (the_geom, {geo_id_column})
    SELECT *
    FROM OBS_GetBoundariesByGeometry(
      ST_Buffer(CDB_LatLng(-33.8806, 151.2131), 0.01),
      'au.geo.UCL'
    )







.. raw:: html

   <table border="1" class="docutils">
   <thead valign="bottom">
   <tr class="row-odd"><th class="head">Boundary</th>
   <th class="head">Time (default is latest)</th>
   </tr>
   </thead>
   <tbody valign="top">


   
.. raw:: html

   <tr class="row-even"><td>

:ref:`au.geo.UCL`

.. raw:: html

   </td>
   <td>

2011

.. raw:: html

   </td>

   

.. raw:: html

   </tr>
   </tbody>
   </table>





:Source:

    

:License:

    



